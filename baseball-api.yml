openapi: 3.0.0
info:
  version: "2.0.0"
  title: "SnuBaseballTracker"
  description: "SnuBaseballTracker API"
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUNDONGHYUN/SnuBaseballTracker/2.0.0
tags:
  - name: auth
  - name: profile
  - name: tournaments
  - name: teams
  - name: games
  - name: plays
  - name: records
  - name: admin

paths:
  /auth/email/request:
    post:
      summary: "이메일 인증번호 발송"
      description: |
        사용자 이메일(@snu.ac.kr)로 인증번호를 발송합니다.
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
      responses:
        "200":
          description: "인증번호 발송 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification code sent to junho@snu.ac.kr."
        "400":
          description: "잘못된 이메일 형식 또는 도메인 아님"
        "429":
          description: "요청 횟수 초과"

  /auth/email/verify:
    post:
      summary: "이메일 인증번호 검증"
      description: "이메일과 인증번호를 검증하여 이메일 소유 여부를 확인합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                code:
                  type: string
                  example: "847219"
      responses:
        "200":
          description: "인증 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  verificationToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJrZXJvcm8xOTY3MTk2N0BnbWFpbC5jb20iLCJpYXQiOjE3NTEwMDA4NzMsImV4cCI6MTc1MTAwMjY3MywiaXNzIjoiZGFlZ3VoaWdobWFuIn0.TkUlL704jrRcgNF2YMBdroJqIi_8flXon_1j2q3Ncb4"
        "400":
          description: "잘못된 코드 또는 만료됨"

  /auth/signup:
    post:
      summary: "회원가입 (비밀번호 설정)"
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, verificationToken]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                password:
                  type: string
                  format: password
                  example: "mypassword123!"
                verificationToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJrZXJvcm8xOTY3MTk2N0BnbWFpbC5jb20iLCJpYXQiOjE3NTEwMDA4NzMsImV4cCI6MTc1MTAwMjY3MywiaXNzIjoiZGFlZ3VoaWdobWFuIn0.TkUlL704jrRcgNF2YMBdroJqIi_8flXon_1j2q3Ncb4"
      responses:
        "200":
          description: "회원가입 완료"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: "이메일 인증이 안 되었거나 이미 가입됨"

  /auth/login:
    post:
      summary: "로그인"
      description: "이메일과 비밀번호로 로그인합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "junho@snu.ac.kr"
                password:
                  type: string
                  format: password
                  example: "mypassword123!"
      responses:
        "200":
          description: "로그인 성공"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "이메일 또는 비밀번호가 잘못됨"

  /auth/refresh:
    post:
      parameters:
        - name: refresh_token
          in: cookie
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      summary: "토큰 갱신"
      tags: [auth]
      responses:
        "200":
          description: "토큰 갱신 성공"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "리프레시 토큰이 만료되었거나 유효하지 않음"

  /auth/logout:
    post:
      summary: "로그아웃"
      tags: [auth]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "로그아웃 성공"

  /auth/password/change:
    post:
      summary: "비밀번호 변경"
      tags: [auth]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "oldpassword123!"
                newPassword:
                  type: string
                  format: password
      responses:
        "200":
          description: "비밀번호 변경 성공"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "비밀번호 변경 실패"

  /auth/password/request-reset:
    post:
      summary: "비밀번호 재설정 링크 요청"
      description: "사용자 이메일로 비밀번호 재설정 링크를 전송합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        "200":
          description: "재설정 링크 전송 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "비밀번호 재설정 이메일이 전송되었습니다."

  /auth/password/reset:
    post:
      summary: "비밀번호 재설정"
      description: "이메일로 받은 링크에 포함된 토큰으로 비밀번호를 재설정합니다."
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token:
                  type: string
                  description: "이메일로 받은 재설정 토큰"
                  example: "abc123def456..."
                newPassword:
                  type: string
                  minLength: 8
                  description: "새로운 비밀번호 (최소 8자)"
                  example: "newPassword123"
      responses:
        "200":
          description: "비밀번호 재설정 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "비밀번호가 성공적으로 재설정되었습니다."
        "400":
          description: "토큰이 만료되었거나 유효하지 않음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "유효하지 않은 재설정 토큰입니다."
                  errorCode:
                    type: string
                    example: "INVALID_RESET_TOKEN"

  # /teams/grouped:
  #   get:
  #     summary: "모든 조의 팀 목록을 조별로 그룹화하고 순위별로 정렬해서 조회"
  #     tags: [teams]
  #     responses:
  #       "200":
  #         description: "조별로 그룹화된 팀 목록 반환 (각 조 내부는 순위 순 정렬)"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/GroupedTeamResponse"

  /tournaments/{tournamentId}/teams/grouped:
    get:
      summary: "토너먼트별 조의 팀 목록을 조별로 그룹화하고 순위별로 정렬해서 조회"
      tags: [tournaments]
      parameters:
        - name: tournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "토너먼트별 조별로 그룹화된 팀 목록 반환 (각 조 내부는 순위 순 정렬)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupedTeamResponse"
        "404":
          description: "해당 토너먼트가 존재하지 않는 경우"

  /tournaments/{tournamentId}/teams/{teamTournamentId}/players:
    get:
      summary: "토너먼트별 팀 선수 목록 조회"
      description: |
        토너먼트 ID와 팀-토너먼트 ID를 경로로 받아 해당 팀에 소속된 선수들을 리스트업합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [tournaments]
      parameters:
        - name: tournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "토너먼트 ID"
          example: 1
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponse"
        "404":
          description: "해당 토너먼트 또는 팀이 존재하지 않는 경우"

  # /teams/{teamId}/players:
  #   get:
  #     summary: "특정 팀의 선수 목록 조회"
  #     description: |
  #       팀 ID를 경로로 받아 해당 팀에 소속된 선수들을 리스트업합니다.
  #     tags: [teams]
  #     parameters:
  #       - name: teamId
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: "팀의 ID"
  #         example: 1
  #     responses:
  #       "200":
  #         description: "성공적으로 선수 목록을 가져옴"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/PlayerListResponse"
  #       "404":
  #         description: "해당 팀이 존재하지 않는 경우"

  /records/batters:
    get:
      summary: "전체 타자 기록 조회"
      description: |
        전체 타자 기록을 반환합니다. 안타 수가 1이상인 선수들을 안타 수를 기준으로 내림차순 정렬합니다.
      tags: [records]
      responses:
        "200":
          description: "성공적으로 타자 기록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatterRecordsResponse"
        "500":
          description: "서버 내부 오류"

  /records/pitchers:
    get:
      summary: "탈삼진 수를 기준으로 상위 20명 반환"
      tags: [records]
      responses:
        "200":
          description: "성공적으로 투수 기록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PitcherRecordsResponse"
        "500":
          description: "서버 내부 오류"

  /games:
    get:
      summary: "날짜 범위에 따른 경기 일정 조회"
      tags: [games]
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date
          description: "조회 시작 날짜 (YYYY-MM-DD 형태)"
          example: "2025-04-23"
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date
          description: "조회 종료 날짜 (YYYY-MM-DD 형태)"
          example: "2025-04-25"
      responses:
        "200":
          description: "날짜 범위 내 경기 일정 정보"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GamesByDatesResponse"
        "400":
          description: "잘못된 파라미터 형식"
        "404":
          description: "해당 날짜 범위의 경기가 존재하지 않음"

  # /games/bracket-schedule:
  #   get:
  #     summary: "토너먼트 브라켓 일정 조회"
  #     tags: [games]
  #     responses:
  #       "200":
  #         description: "토너먼트 브라켓 일정 조회 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/TournamentScheduleResponse"

  /games/{gameId}/teams/{teamTournamentId}/players:
    get:
      summary: "특정 경기의 선수 목록 조회"
      description: |
        특정 경기의 선수 목록을 조회합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListResponse"

  /games/{gameId}/teams/{teamTournamentId}/players-with-in-lineup:
    get:
      summary: "특정 경기의 선수 목록 조회 for 교체명단 등록"
      description: |
        라인업 등록여부를 inLineup 필드에 표시합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "성공적으로 선수 목록을 가져옴"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListWithInLineupResponse"

  /games/{gameId}/teams/{teamTournamentId}/substitution:
    post:
      summary: "특정 경기의 교체 명단 제출"
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required:
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitSubstitutionRequest"
      responses:
        "200":
          description: "교체 명단 제출 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitSubstitutionResponse"
        "400":
          description: "잘못된 요청 (예: 이미 제출된 라인업, 중복된 선수, 인원이 부족 등)"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"

  /games/{gameId}/substitutable-batters:
    get:
      summary: "교체 가능한 타자 목록 조회"
      description: |
        교체 가능한 타자 목록을 조회합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      responses:
        "200":
          description: "교체 가능한 타자 목록 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListWithSubstitutionFlag"

  /games/{gameId}/substitutable-pitchers:
    get:
      summary: "교체 가능한 투수 목록 조회"
      description: |
        교체 가능한 투수 목록을 조회합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamType
          in: query
          required: true
          schema:
            type: string
            enum: [home, away]
          description: "팀 타입"
          example: "home"
      responses:
        "200":
          description: "교체 가능한 투수 목록 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerListWithSubstitutableResponse"

  /games/{gameId}/lineup/{teamTournamentId}:
    get:
      summary: "특정 경기의 라인업 조회"
      description: |
        특정 경기의 라인업을 조회합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "특정 경기의 라인업 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineupResponse"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"

    post:
      summary: "특정 경기의 라인업 제출"
      description: |
        특정 경기의 라인업을 제출합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitLineupRequest"
      responses:
        "201":
          description: "라인업 제출 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "라인업이 성공적으로 제출되었습니다."
        "400":
          description: "잘못된 라인업 데이터"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"

    patch:
      summary: "특정 경기 라인업 부분 수정"
      description: |
        특정 경기의 라인업을 수정합니다.
        선수의 ID는 playerTournamentId를 사용합니다.
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "경기 ID"
          example: 1001
        - name: teamTournamentId
          in: path
          required: true
          schema:
            type: integer
          description: "팀-토너먼트 ID"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitLineupRequest"
      responses:
        "200":
          description: "라인업 수정 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "라인업이 성공적으로 수정되었습니다."
        "400":
          description: "잘못된 라인업 데이터"
        "404":
          description: "해당 경기 또는 팀을 찾을 수 없음"

  /games/{gameId}/start:
    post:
      summary: "게임 시작"
      description: |
        게임을 시작하고 초기 상태를 설정합니다.
        - 게임 상태를 IN_PROGRESS로 변경
        - GameStat 생성 및 초기화 (점수 0, 1회초, 원정팀 1번타자 vs 홈팀 선발투수)
        - 양 팀의 라인업이 모두 제출되어 있어야 함
      tags: [games]
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
          description: "게임 ID"
          example: 1001
      responses:
        "200":
          description: "게임 시작 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: "게임 시작 성공 여부"
                    example: true
                  message:
                    type: string
                    description: "게임 시작 메시지"
                    example: "게임이 시작되었습니다."
                  snapshot:
                    $ref: "#/components/schemas/PlaySnapshotResponse"
                required:
                  - success
                  - message
                  - snapshot
        "400":
          description: |
            잘못된 요청
            - 이미 시작된 게임
            - 라인업이 제출되지 않은 경우
            - 필수 선수(투수, 타자)가 없는 경우
        "404":
          description: "게임을 찾을 수 없음"

  # /games/{gameId}/results:
  #   get:
  #     summary: "경기 결과 조회 (스코어보드 + 팀/선수 기록)"
  #     description: |
  #       종료된 경기(gameId)에 대한:
  #       - 이닝별 득점(스코어보드)
  #       - 팀별 총 득점, 안타 등
  #       - 선수별 당일 스탯(타자, 투수)
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 101
  #     responses:
  #       "200":
  #         description: "경기 결과 조회 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/GameResultsResponse"
  #       "404":
  #         description: "경기(gameId) 없음"

  #   post:
  #     summary: "경기 결과 생성 (스코어보드 + 팀/선수 기록)"
  #     description: |
  #       - 경기 종료 후 결과 생성
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 101
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/SimpleScoreRequest"
  #     responses:
  #       "200":
  #         description: "경기 결과 생성 성공"
  #       "400":
  #         description: "이미 종료된 경기, 또는 정합성 오류"
  #       "404":
  #         description: "경기(gameId) 없음"

  # /games/{gameId}/results/finalize:
  #   post:
  #     summary: "경기 결과 최종 확정"
  #     description: |
  #       - 스코어, 팀 득점/승패 반영
  #       - 선수별 기록(타격/투수) 통산 스탯에 반영
  #       - 최종 확정된 결과를 반환
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 101
  #     responses:
  #       "200":
  #         description: "경기 종료 및 확정 성공"
  #       "400":
  #         description: "이미 종료된 경기, 또는 정합성 오류"
  #       "404":
  #         description: "경기(gameId) 없음"

  # /games/{gameId}/results/batters/{batterGameStatsId}:
  #   patch:
  #     summary: "타자 기록 수정 (타수/안타/홈런/볼넷)"
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 101
  #       - name: batterGameStatsId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "선수 경기 기록 ID"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UpdateBatterStatsRequest"
  #     responses:
  #       "200":
  #         description: "결과 수정 성공 → 수정된 결과 반환"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/UpdateBatterResponse"
  #       "400":
  #         description: "정합성 오류 등 잘못된 요청"
  #       "404":
  #         description: "경기(gameId) 없음"

  # /games/{gameId}/results/pitchers/{pitcherGameStatsId}:
  #   patch:
  #     summary: "투수 기록 수정 (K)"
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 101
  #       - name: pitcherGameStatsId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "선수 경기 기록 ID"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UpdatePitcherStatsRequest"
  #     responses:
  #       "200":
  #         description: "결과 수정 성공 → 수정된 결과 반환"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/UpdatePitcherResponse"
  #       "400":
  #         description: "정합성 오류 등 잘못된 요청"

  # /games/{gameId}/snapshot/stream:
  #   get:
  #     summary: "게임 스냅샷 스트림"
  #     description: |
  #       게임의 실시간 스냅샷을 SSE(Server-Sent Events)로 스트리밍합니다.
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "게임 ID"
  #         example: 1001
  #     responses:
  #       "200":
  #         description: "SSE 스트림 시작"
  #         content:
  #           text/event-stream:
  #             schema:
  #               type: string

  # /games/{gameId}/plays:
  #   post:
  #     summary: "경기에서 타석 생성"
  #     description: |
  #       특정 경기에서 새로운 타석을 생성합니다.
  #       - 타자와 투수의 출전 정보를 기반으로 타석을 생성
  #     tags: [games]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "경기 ID"
  #         example: 1001
  #     responses:
  #       "201":
  #         description: "타석 생성 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/PlayResponse"
  #       "400":
  #         description: "잘못된 요청 (예: 존재하지 않는 선수, 잘못된 경기 ID 등)"
  #       "404":
  #         description: "경기를 찾을 수 없음"

  # /plays/{playId}/result:
  #   patch:
  #     summary: "플레이 결과 업데이트"
  #     description: |
  #       특정 플레이의 결과를 업데이트합니다.
  #     tags: [plays]
  #     parameters:
  #       - name: playId
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: "플레이 ID"
  #         example: 1
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UpdatePlayRequest"
  #     responses:
  #       "200":
  #         description: "플레이 결과 업데이트 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/PlaySnapshotResponse"

  # /plays/{playId}/runner-events:
  #   post:
  #     summary: "주자 이벤트 추가"
  #     description: |
  #       특정 플레이에 주자 이벤트를 추가합니다.
  #       주자의 ID는 BatterGameParticipation ID를 사용합니다.
  #     tags: [plays]
  #     parameters:
  #       - name: playId
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: "플레이 ID"
  #         example: 1
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/AddRunnerEventsRequest"
  #     responses:
  #       "200":
  #         description: "주자 이벤트 추가 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/PlaySnapshotResponse"

  # /plays/{playId}/rollback:
  #   post:
  #     summary: "특정 타석으로 롤백"
  #     description: |
  #       특정 타석까지 되돌립니다.
  #       - 해당 타석 이후의 모든 타석과 주자 이벤트를 삭제
  #       - 대상 타석을 LIVE 상태로 되돌림
  #       - 타석 결과와 주자 이벤트를 초기화
  #       - 현재 타자/투수 정보를 롤백된 타석 기준으로 업데이트
  #     tags: [plays]
  #     parameters:
  #       - name: playId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "롤백할 타석 ID"
  #         example: 501
  #     responses:
  #       "200":
  #         description: "롤백 성공"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 success:
  #                   type: boolean
  #                   description: "롤백 성공 여부"
  #                   example: true
  #                 message:
  #                   type: string
  #                   description: "롤백 결과 메시지"
  #                   example: "Play 501로 롤백되었습니다."
  #                 rollbackedPlaysCount:
  #                   type: integer
  #                   description: "삭제된 타석 수"
  #                   example: 3
  #                 currentPlay:
  #                   type: object
  #                   properties:
  #                     id:
  #                       type: integer
  #                       description: "현재 타석 ID"
  #                       example: 501
  #                     seq:
  #                       type: integer
  #                       description: "현재 타석 시퀀스"
  #                       example: 5
  #                     status:
  #                       type: string
  #                       enum: ["LIVE", "COMPLETE", "ABANDONED"]
  #                       description: "현재 타석 상태"
  #                       example: "LIVE"
  #                     batterGpId:
  #                       type: integer
  #                       description: "현재 타자 출전 정보 ID"
  #                       example: 101
  #                     pitcherGpId:
  #                       type: integer
  #                       description: "현재 투수 출전 정보 ID"
  #                       example: 110
  #                   required:
  #                     - id
  #                     - seq
  #                     - status
  #                     - batterGpId
  #                     - pitcherGpId
  #               required:
  #                 - success
  #                 - message
  #                 - rollbackedPlaysCount
  #                 - currentPlay
  #       "400":
  #         description: "잘못된 요청 (예: 존재하지 않는 타석)"
  #       "404":
  #         description: "타석을 찾을 수 없음"

  # /plays/{gameId}/undo:
  #   post:
  #     summary: "가장 최근 액션 실행 취소"
  #     description: |
  #       가장 최근에 실행된 액션을 취소합니다.
  #       - 타석 생성, 타석 결과 업데이트, 주자 이벤트 추가 등을 취소
  #       - 히스토리 기반으로 안전하게 실행 취소
  #       - 이전 상태로 되돌리기
  #     tags: [plays]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "게임 ID"
  #         example: 1001
  #     responses:
  #       "200":
  #         description: "Undo 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/UndoResponse"
  #       "404":
  #         description: "Undo할 히스토리가 없음"

  # /plays/{gameId}/redo:
  #   post:
  #     summary: "가장 최근 취소된 액션 재실행"
  #     description: |
  #       가장 최근에 취소된 액션을 다시 실행합니다.
  #       - 취소된 타석 생성, 타석 결과 업데이트, 주자 이벤트 추가 등을 재실행
  #       - 히스토리 기반으로 안전하게 재실행
  #     tags: [plays]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "게임 ID"
  #         example: 1001
  #     responses:
  #       "200":
  #         description: "Redo 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/RedoResponse"
  #       "404":
  #         description: "Redo할 히스토리가 없음"

  # /plays/{gameId}/history:
  #   get:
  #     summary: "게임 히스토리 조회"
  #     description: |
  #       게임의 모든 액션 히스토리를 조회합니다.
  #       - 타석 생성, 결과 업데이트, 주자 이벤트 추가 등의 히스토리
  #       - 각 액션의 상태(ACTIVE, UNDONE, REDONE) 확인 가능
  #     tags: [plays]
  #     parameters:
  #       - name: gameId
  #         in: path
  #         schema:
  #           type: integer
  #         description: "게임 ID"
  #         example: 1001
  #     responses:
  #       "200":
  #         description: "히스토리 조회 성공"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/HistoryResponse"
  #       "404":
  #         description: "게임을 찾을 수 없음"

  /profile/me:
    get:
      summary: "내 프로필 조회"
      description: "현재 로그인한 사용자의 프로필 정보를 조회합니다."
      tags: [profile]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "프로필 조회 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: "인증되지 않은 요청"
        "404":
          description: "프로필을 찾을 수 없음"

    patch:
      summary: "내 프로필 수정"
      description: "현재 로그인한 사용자의 프로필 정보를 수정합니다."
      tags: [profile]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
      responses:
        "200":
          description: "프로필 수정 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: "잘못된 요청 데이터"
        "401":
          description: "인증되지 않은 요청"

  /admin/forfeit-game:
    patch:
      summary: "몰수승 처리"
      tags: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [gameId, winnerTeamId]
              properties:
                gameId:
                  type: integer
                  description: "경기 ID"
                  example: 101
                winnerTeamId:
                  type: integer
                  description: "승리 팀 ID"
                  example: 1
      responses:
        "200":
          description: "몰수승 처리 성공"
        "400":
          description: "잘못된 요청"
        "404":
          description: "경기를 찾을 수 없음"

  /admin/change-phase/{tournamentId}:
    patch:
      summary: "토너먼트 단계 변경"
      tags: [admin]
      parameters:
        - name: tournamentId
          required: true
          in: path
          schema:
            type: integer
          description: "토너먼트 ID"
          example: 1
      responses:
        "200":
          description: "토너먼트 단계 변경 성공"
        "400":
          description: "잘못된 요청"
        "404":
          description: "토너먼트를 찾을 수 없음"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Tournament Schedule Response
    TournamentScheduleResponse:
      type: object
      properties:
        games:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 101
              bracketPosition:
                type: string
                example: "A1"
              homeTeam:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "관악사"
                required:
                  - id
                  - name
              awayTeam:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: "공대"
                required:
                  - id
                  - name
              status:
                type: string
                example: "SCHEDULED"
              startTime:
                type: string
                format: date-time
                example: "2025-04-23T09:00:00Z"
            required:
              - id
              - bracketPosition
              - homeTeam
              - awayTeam
              - status
              - startTime
      required:
        - games

    # Team Related Schemas
    GroupedTeamResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TeamList"
      example:
        A:
          - id: 1
            name: "관악사"
            games: 4
            wins: 4
            draws: 0
            losses: 0
            rank: 1
          - id: 2
            name: "포톤스"
            games: 4
            wins: 3
            draws: 0
            losses: 1
            rank: 2
        B:
          - id: 3
            name: "아갉쥐"
            games: 4
            wins: 2
            draws: 0
            losses: 2
            rank: 1

    TeamList:
      type: array
      items:
        $ref: "#/components/schemas/Team"

    Team:
      type: object
      properties:
        id:
          type: integer
          description: "팀-토너먼트 ID (TeamTournament ID)"
          example: 1
        name:
          type: string
          example: "관악사"
        games:
          type: integer
          example: 4
        wins:
          type: integer
          example: 2
        draws:
          type: integer
          example: 0
        losses:
          type: integer
          example: 2
        rank:
          type: integer
          example: 1

    # Game Related Schemas
    GamesByDatesResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            range:
              type: object
              properties:
                from:
                  type: string
                  format: date
                  description: "조회 시작 날짜 (YYYY-MM-DD)"
                  example: "2025-04-23"
                to:
                  type: string
                  format: date
                  description: "조회 종료 날짜 (YYYY-MM-DD)"
                  example: "2025-04-25"
              required:
                - from
                - to
            days:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    description: "날짜 (YYYY-MM-DD)"
                    example: "2025-04-23"
                  dayOfWeek:
                    type: string
                    description: "요일 정보"
                    example: "수"
                  games:
                    type: array
                    description: "해당 날짜의 경기 목록"
                    items:
                      $ref: "#/components/schemas/Game"
                required:
                  - date
                  - dayOfWeek
                  - games
          required:
            - range
            - days
      required:
        - data

    Game:
      type: object
      properties:
        id:
          type: integer
          description: "경기 ID"
          example: 101
        time:
          type: string
          description: "경기 시작 시간 (HH:MM)"
          example: "09:00"
        status:
          type: string
          description: "경기 상태"
          example: "IN_PROGRESS"
        stage:
          type: string
          description: "경기 단계"
          example: "LEAGUE"
        inning:
          type: integer
          nullable: true
          description: "현재 이닝"
          example: 5
        inningHalf:
          type: string
          description: "초/말"
          example: "BOT"
        isForfeit:
          type: boolean
          example: false
        winnerTeamId:
          type: integer
          nullable: true
          example: 1
        homeTeam:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "관악사"
            score:
              type: integer
              nullable: true
              example: 10
        awayTeam:
          type: object
          properties:
            id:
              type: integer
              example: 2
            name:
              type: string
              example: "공대"
            score:
              type: integer
              nullable: true
              example: 6
        canRecord:
          type: boolean
          description: "현재 사용자가 해당 경기의 심판인지 여부"
          example: true
        canSubmitLineup:
          type: object
          description: "현재 사용자의 라인업 제출 권한"
          properties:
            home:
              type: boolean
              description: "홈팀 라인업 제출 권한"
              example: false
            away:
              type: boolean
              description: "원정팀 라인업 제출 권한"
              example: true
          required:
            - home
            - away
      required:
        - id
        - time
        - status
        - stage
        - homeTeam
        - awayTeam
        - isForfeit
        - canRecord
        - canSubmitLineup

    # Player Related Schemas
    PlayerListResponse:
      type: object
      properties:
        id:
          type: integer
          description: "팀-토너먼트 ID (TeamTournament ID)"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        players:
          type: array
          description: "선수 배열"
          items:
            $ref: "#/components/schemas/Player"
      required:
        - id
        - name
        - players

    PlayerListWithInLineupResponse:
      type: object
      properties:
        id:
          type: integer
          description: "팀 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        players:
          type: array
          description: "선수 배열"
          items:
            $ref: "#/components/schemas/PlayerWithInLineup"
      required:
        - id
        - name
        - players

    Player:
      type: object
      properties:
        id:
          type: integer
          description: "선수-토너먼트 ID (PlayerTournament ID)"
          example: 101
        department:
          type: string
          description: "학과"
          example: "수학교육과"
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        isElite:
          type: boolean
          description: "선출 여부 (true면 프로 경험자)"
          example: false
        isWc:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
      required:
        - id
        - department
        - name
        - isElite
        - isWc

    PlayerWithInLineup:
      type: object
      properties:
        id:
          type: integer
          description: "선수 ID"
          example: 101
        department:
          type: string
          description: "학과"
          example: "수학교육과"
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        isElite:
          type: boolean
          description: "선출 여부 (true면 프로 경험자)"
          example: false
        isWc:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
        inLineup:
          type: boolean
          description: "라인업 등록 여부"
          example: true
      required:
        - id
        - department
        - name
        - isElite
        - isWc
        - inLineup

    PlayerListResponseWithSubstitutionFlag:
      type: object
      properties:
        teamId:
          type: integer
          description: "팀 ID"
          example: 1
        teamName:
          type: string
          description: "팀 이름"
          example: "공대"
        players:
          type: array
          description: "선수 목록"
          items:
            $ref: "#/components/schemas/PlayerWithSubstitutionFlag"
      required:
        - teamId
        - teamName
        - players

    PlayerWithSubstitutionFlag:
      type: object
      properties:
        id:
          type: integer
          description: "선수 ID"
          example: 101
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        department:
          type: string
          description: "학과"
          example: "수학교육과"
        isElite:
          type: boolean
          description: "선출 여부 (true면 프로 경험자)"
          example: false
        isWc:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
        isSubstitutable:
          type: boolean
          description: "해당 선수가 교체 가능한지 여부"
          example: true
      required:
        - id
        - name
        - department
        - isElite
        - isWc
        - isSubstitutable

    # Lineup Related Schemas

    SubmitLineupRequest:
      type: object
      properties:
        batters:
          type: array
          description: "타순별 등록 선수 목록"
          items:
            $ref: "#/components/schemas/LineupBatter"
          minItems: 9
          maxItems: 9
        pitcher:
          $ref: "#/components/schemas/LineupPitcher"
      required:
        - batters
        - pitcher

    LineupBatter:
      type: object
      properties:
        battingOrder:
          type: integer
          nullable: true
          description: "타순 (1~9)"
          example: 1
        id:
          type: integer
          description: "playerTournamentId"
          example: 101
        position:
          type: string
          description: "포지션 (CF, SS, C, 1B, 2B, 3B, LF, RF, DH, P 등)"
          example: "CF"
      required:
        - id
        - battingOrder
        - position

    LineupBatterWithName:
      type: object
      properties:
        battingOrder:
          type: integer
          nullable: true
          description: "타순 (1~9)"
          example: 1
        id:
          type: integer
          description: "playerTournamentId"
          example: 101
        name:
          type: string
          description: "선수 이름"
          example: "윤동현"
        position:
          type: string
          description: "포지션 (CF, SS, C, 1B, 2B, 3B, LF, RF, DH, P 등)"
          example: "CF"
        isWC:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
      required:
        - id
        - battingOrder
        - position
        - name

    LineupPitcher:
      type: object
      properties:
        id:
          type: integer
          description: "playerTournamentId"
          example: 110
      required:
        - id

    LineupPitcherWithName:
      type: object
      properties:
        id:
          type: integer
          description: "playerTournamentId"
          example: 110
        name:
          type: string
          description: "선수 이름"
          example: "김철수"
        isWC:
          type: boolean
          description: "WC 여부 (true면 와일드카드)"
          example: false
      required:
        - id
        - name

    SubmitLineupResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "라인업 등록 성공 여부"
          example: true
        message:
          type: string
          description: "추가 메시지"
          example: "라인업 제출이 완료되었습니다."
      required:
        - success
        - message

    # Substitution Related Schemas
    SubmitSubstitutionRequest:
      type: object
      properties:
        playerIds:
          type: array
          description: "교체할 선수 ID 목록"
          example: [101, 102]
          items:
            type: integer
      required:
        - playerIds

    SubmitSubstitutionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "교체 명단 제출 성공 여부"
          example: true
        playerIds:
          type: array
          description: "교체된 선수 ID 목록"
          items:
            type: integer
          example: [101, 102]
      required:
        - success
        - playerIds

    # Records Related Schemas
    BatterRecordsResponse:
      type: object
      properties:
        count:
          type: integer
          description: "가져온 타자 수"
          example: 150
        batters:
          type: array
          description: "타자 기록 배열"
          items:
            $ref: "#/components/schemas/BatterRecord"
      required:
        - count
        - batters

    BatterRecord:
      type: object
      properties:
        rank:
          type: integer
          description: "순위"
          example: 1
        playerName:
          type: string
          description: "선수 이름"
          example: "박병호"
        teamName:
          type: string
          description: "소속 팀 이름"
          example: "관악사"
        teamGameCount:
          type: integer
          description: "소속 팀 경기 수"
          example: 4
        PA:
          type: integer
          description: "타자 기록 수"
          example: 100
        AB:
          type: integer
          description: "타수 (At Bats)"
          example: 20
        H:
          type: integer
          description: "안타 수 (Hits)"
          example: 12
        "2B":
          type: integer
          description: "2루타 (Doubles)"
          example: 3
        "3B":
          type: integer
          description: "3루타 (Triples)"
          example: 1
        HR:
          type: integer
          description: "홈런 (Home Runs)"
          example: 0
        BB:
          type: integer
          description: "볼넷 (Base on Balls)"
          example: 1
        AVG:
          type: string
          format: float
          description: "타율 (Batting Average)"
          example: "0.312"
        OBP:
          type: string
          format: float
          description: "출루율 (On-Base Percentage)"
          example: "0.370"
        SLG:
          type: string
          format: float
          description: "장타율 (Slugging Percentage)"
          example: "0.550"
        OPS:
          type: string
          format: float
          description: "OPS (On-base + Slugging)"
          example: "0.920"
      required:
        - rank
        - playerName
        - teamName
        - AB
        - H
        - AVG

    PitcherRecordsResponse:
      type: object
      properties:
        count:
          type: integer
          description: "가져온 투수 수"
          example: 20
        pitchers:
          type: array
          description: "투수 기록 배열"
          items:
            $ref: "#/components/schemas/PitcherRecord"
      required:
        - count
        - pitchers

    PitcherRecord:
      type: object
      properties:
        rank:
          type: integer
          description: "순위"
          example: 1
        playerName:
          type: string
          description: "선수 이름"
          example: "배찬송"
        teamName:
          type: string
          description: "소속 팀 이름"
          example: "관악사"
        K:
          type: integer
          description: "삼진 수"
          example: 12
      required:
        - rank
        - playerName
        - teamName
        - K

    # Game Results Related Schemas
    GameResultsResponse:
      type: object
      properties:
        scoreboard:
          type: array
          description: "이닝별 득점"
          items:
            $ref: "#/components/schemas/InningHalfScore"
        teamSummary:
          type: object
          properties:
            home:
              $ref: "#/components/schemas/TeamSummary"
            away:
              $ref: "#/components/schemas/TeamSummary"
        batterStats:
          type: object
          properties:
            home:
              type: array
              description: "홈팀 타자 기록"
              items:
                $ref: "#/components/schemas/BatterDailyStats"
            away:
              type: array
              description: "원정팀 타자 기록"
              items:
                $ref: "#/components/schemas/BatterDailyStats"
        pitcherStats:
          type: object
          properties:
            home:
              type: array
              description: "홈팀 투수 기록"
              items:
                $ref: "#/components/schemas/PitcherDailyStats"
            away:
              type: array
              description: "원정팀 투수 기록"
              items:
                $ref: "#/components/schemas/PitcherDailyStats"
      required:
        - scoreboard
        - teamSummary
        - batterStats
        - pitcherStats

    BatterDailyStats:
      type: object
      properties:
        battingOrder:
          type: integer
          description: "타순"
          example: 1
        substitutionOrder:
          type: integer
          description: "교체 순서"
          example: 1
        batterGameStatsId:
          type: integer
          example: 101
        playerName:
          type: string
          example: "김지찬"
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        HR:
          type: integer
          description: "홈런"
          example: 0
        BB:
          type: integer
          description: "볼넷"
          example: 1
      required:
        - batterGameStatsId
        - playerName
        - battingOrder
        - substitutionOrder
        - AB
        - H
        - HR
        - BB

    PitcherDailyStats:
      type: object
      properties:
        pitcherGameStatsId:
          type: integer
          example: 110
        playerName:
          type: string
          example: "발라조빅"
        K:
          type: integer
          description: "삼진"
          example: 5
      required:
        - pitcherGameStatsId
        - playerName
        - K

    UpdateBatterStatsRequest:
      type: object
      properties:
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        BB:
          type: integer
          description: "볼넷"
          example: 1
        "2B":
          type: integer
          description: "2루타"
          example: 0
        "3B":
          type: integer
          description: "3루타"
          example: 0
        HR:
          type: integer
          description: "홈런"
          example: 0
        SAC:
          type: integer
          description: "희생타"
          example: 0

    UpdateBatterResponse:
      type: object
      properties:
        batterGameStatsId:
          type: integer
          description: "선수 경기 기록 ID"
          example: 101
        playerName:
          type: string
          description: "선수 이름"
          example: "김지찬"
        AB:
          type: integer
          description: "타수"
          example: 2
        H:
          type: integer
          description: "안타"
          example: 1
        BB:
          type: integer
          description: "볼넷"
          example: 1
        "2B":
          type: integer
          description: "2루타"
          example: 0
        "3B":
          type: integer
          description: "3루타"
          example: 0
        HR:
          type: integer
          description: "홈런"
          example: 0
        SAC:
          type: integer
          description: "희생타"
          example: 0

    UpdatePitcherStatsRequest:
      type: object
      properties:
        K:
          type: integer
          description: "삼진"
          example: 5

    UpdatePitcherResponse:
      type: object
      properties:
        pitcherGameStatsId:
          type: integer
          description: "선수 경기 기록 ID"
          example: 110
        playerName:
          type: string
          description: "선수 이름"
          example: "발라조빅"
        K:
          type: integer
          description: "삼진"
          example: 5

    # Score Related Schemas
    SimpleScoreRequest:
      type: object
      properties:
        runs:
          type: integer
          example: 1
          description: "득점 수"
      required:
        - runs

    ScoreboardResponse:
      type: object
      properties:
        scoreboard:
          type: array
          description: "이닝별 전체 점수 목록"
          items:
            $ref: "#/components/schemas/InningHalfScore"
        teamSummary:
          type: object
          properties:
            home:
              $ref: "#/components/schemas/TeamSummary"
            away:
              $ref: "#/components/schemas/TeamSummary"
      required:
        - scoreboard

    TeamSummary:
      type: object
      properties:
        id:
          type: integer
          description: "팀 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "공대"
        runs:
          type: integer
          description: "총 득점"
          example: 4
        hits:
          type: integer
          description: "총 안타"
          example: 4
      required:
        - id
        - name
        - runs
        - hits

    InningHalfScore:
      type: object
      properties:
        runs:
          type: integer
          nullable: true
          description: "득점 (아직 기록되지 않은 경우 null)"
          example: 1
      required:
        - runs

    # Play Related Schemas
    PlayResponse:
      type: object
      properties:
        id:
          type: integer
          description: "타석 ID"
          example: 501
        gameId:
          type: integer
          description: "경기 ID"
          example: 1001
        seq:
          type: integer
          description: "경기 전체 시퀀스"
          example: 1
        batterGpId:
          type: integer
          description: "타자 출전 정보 ID"
          example: 101
        pitcherGpId:
          type: integer
          description: "투수 출전 정보 ID"
          example: 110
        resultCode:
          type: string
          nullable: true
          description: "타석 결과 코드"
          enum:
            [
              "1B",
              "2B",
              "3B",
              "HR",
              "BB",
              "SF",
              "SO",
              "O",
              "SO_DROP",
              "FC",
              "ETC",
            ]
          example: "2B"
        status:
          type: string
          description: "타석 상태"
          enum: ["LIVE", "COMPLETE", "ABANDONED"]
          example: "COMPLETE"
        errorFlag:
          type: boolean
          description: "실책 발생 여부"
          example: false
        createdAt:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2025-01-01T09:00:00Z"
      required:
        - id
        - gameId
        - seq
        - batterGpId
        - pitcherGpId
        - status
        - errorFlag
        - createdAt

    UpdatePlayRequest:
      type: object
      properties:
        result:
          type: string
          enum:
            [
              SINGLE,
              DOUBLE,
              TRIPLE,
              HOME_RUN,
              WALK,
              STRIKEOUT,
              OUT,
              SACRIFICE_FLY,
              SACRIFICE_BUNT,
              ERROR,
              FIELDERS_CHOICE,
              HIT_BY_PITCH,
              WILD_PITCH,
              PASSED_BALL,
              BALK,
              INTERFERENCE,
              OTHER,
            ]
          description: "플레이 결과"
          example: "SINGLE"
        status:
          type: string
          enum: [LIVE, COMPLETE, ABANDONED]
          description: "플레이 상태"
          example: "COMPLETE"
        notes:
          type: string
          description: "추가 설명"
          example: "좌측 안타"
      required:
        - result
        - status

    AddRunnerEventsRequest:
      type: object
      properties:
        runnerEvents:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "BatterGameParticipation ID"
                example: 101
              startBase:
                type: string
                enum: [B, 1, 2, 3]
                description: "시작 베이스"
                example: "1"
              endBase:
                type: string
                enum: [1, 2, 3, H]
                description: "도착 베이스"
                example: "2"
              eventType:
                type: string
                enum:
                  [
                    STOLEN_BASE,
                    WILD_PITCH,
                    PASSED_BALL,
                    ERROR,
                    ADVANCE_ON_THROW,
                    OTHER,
                  ]
                description: "이벤트 타입"
                example: "STOLEN_BASE"
              isActual:
                type: boolean
                description: "실제 발생한 이벤트 여부"
                example: true
              notes:
                type: string
                description: "추가 설명"
                example: "도루 성공"
      required:
        - runnerEvents

    # History Related Schemas
    UndoResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Undo 성공 여부"
          example: true
        message:
          type: string
          description: "Undo 결과 메시지"
          example: "Undo 완료"
        undoneAction:
          type: object
          properties:
            type:
              type: string
              enum: ["CREATE_PLAY", "UPDATE_PLAY_RESULT", "ADD_RUNNER_EVENTS"]
              description: "취소된 액션 타입"
              example: "ADD_RUNNER_EVENTS"
            playId:
              type: integer
              description: "관련된 타석 ID"
              example: 501
            seq:
              type: integer
              description: "히스토리 시퀀스"
              example: 5
          required:
            - type
            - playId
            - seq
      required:
        - success
        - message
        - undoneAction

    RedoResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "Redo 성공 여부"
          example: true
        message:
          type: string
          description: "Redo 결과 메시지"
          example: "Redo 완료"
        redoneAction:
          type: object
          properties:
            type:
              type: string
              enum: ["CREATE_PLAY", "UPDATE_PLAY_RESULT", "ADD_RUNNER_EVENTS"]
              description: "재실행된 액션 타입"
              example: "ADD_RUNNER_EVENTS"
            playId:
              type: integer
              description: "관련된 타석 ID"
              example: 501
            seq:
              type: integer
              description: "히스토리 시퀀스"
              example: 5
          required:
            - type
            - playId
            - seq
      required:
        - success
        - message
        - redoneAction

    HistoryResponse:
      type: object
      properties:
        gameId:
          type: integer
          description: "게임 ID"
          example: 1001
        histories:
          type: array
          description: "히스토리 목록"
          items:
            type: object
            properties:
              id:
                type: integer
                description: "히스토리 ID"
                example: 1
              seq:
                type: integer
                description: "히스토리 시퀀스"
                example: 1
              actionType:
                type: string
                enum: ["CREATE_PLAY", "UPDATE_PLAY_RESULT", "ADD_RUNNER_EVENTS"]
                description: "액션 타입"
                example: "CREATE_PLAY"
              playId:
                type: integer
                nullable: true
                description: "관련된 타석 ID"
                example: 501
              status:
                type: string
                enum: ["ACTIVE", "UNDONE", "REDONE", "INVALID"]
                description: "히스토리 상태"
                example: "ACTIVE"
              createdAt:
                type: string
                format: date-time
                description: "생성 시간"
                example: "2025-01-01T09:00:00Z"
            required:
              - id
              - seq
              - actionType
              - status
              - createdAt
      required:
        - gameId
        - histories

    # Profile Related Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: "프로필 ID"
          example: 1
        nickname:
          type: string
          nullable: true
          description: "닉네임"
          example: "야구왕"
        photoUrl:
          type: string
          nullable: true
          description: "프로필 사진 URL"
          example: "https://example.com/photo.jpg"
      required:
        - id

    UpdateProfileRequest:
      type: object
      properties:
        nickname:
          type: string
          description: "닉네임"
          example: "야구왕"
      required:
        - nickname

    # Play Snapshot Schema
    PlaySnapshotResponse:
      type: object
      properties:
        playId:
          type: integer
          description: "플레이 ID"
          example: 1
        gameSummary:
          type: object
          properties:
            inning:
              type: integer
              description: "이닝"
              example: 1
            inningHalf:
              type: string
              enum: [TOP, BOT]
              description: "이닝 하프"
              example: "TOP"
            awayTeam:
              type: object
              properties:
                id:
                  type: integer
                  description: "팀-토너먼트 ID"
                  example: 1
                name:
                  type: string
                  description: "팀 이름"
                  example: "원정팀"
            homeTeam:
              type: object
              properties:
                id:
                  type: integer
                  description: "팀-토너먼트 ID"
                  example: 2
                name:
                  type: string
                  description: "팀 이름"
                  example: "홈팀"
            scoreboard:
              type: object
              properties:
                away:
                  type: integer
                  description: "원정팀 점수"
                  example: 0
                home:
                  type: integer
                  description: "홈팀 점수"
                  example: 0
        lineup:
          type: object
          properties:
            away:
              type: object
              properties:
                batters:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "BatterGameParticipation ID"
                        example: 101
                      name:
                        type: string
                        description: "선수 이름"
                        example: "김타자"
                      position:
                        type: string
                        description: "포지션"
                        example: "LF"
                      battingOrder:
                        type: integer
                        description: "타순"
                        example: 1
                pitcher:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: "PitcherGameParticipation ID"
                      example: 201
                    name:
                      type: string
                      description: "선수 이름"
                      example: "박투수"
                    position:
                      type: string
                      description: "포지션"
                      example: "P"
                    isElite:
                      type: boolean
                      description: "엘리트 여부"
                      example: false
            home:
              type: object
              properties:
                batters:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "BatterGameParticipation ID"
                        example: 102
                      name:
                        type: string
                        description: "선수 이름"
                        example: "이타자"
                      position:
                        type: string
                        description: "포지션"
                        example: "RF"
                      battingOrder:
                        type: integer
                        description: "타순"
                        example: 1
                pitcher:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: "PitcherGameParticipation ID"
                      example: 202
                    name:
                      type: string
                      description: "선수 이름"
                      example: "최투수"
                    position:
                      type: string
                      description: "포지션"
                      example: "P"
                    isElite:
                      type: boolean
                      description: "엘리트 여부"
                      example: false
        runnersOnBase:
          type: array
          items:
            type: object
            properties:
              base:
                type: integer
                description: "베이스 번호"
                example: 1
              id:
                type: integer
                description: "BatterGameParticipation ID"
                example: 101
              name:
                type: string
                description: "선수 이름"
                example: "김주자"
        currentAtBat:
          type: object
          properties:
            batter:
              type: object
              properties:
                id:
                  type: integer
                  description: "BatterGameParticipation ID"
                  example: 101
                name:
                  type: string
                  description: "선수 이름"
                  example: "김타자"
                position:
                  type: string
                  description: "포지션"
                  example: "LF"
                battingOrder:
                  type: integer
                  description: "타순"
                  example: 1
                battingResult:
                  type: string
                  description: "타격 결과"
                  example: ""
                battingAverage:
                  type: number
                  description: "타율"
                  example: 0.333
                todayStats:
                  type: object
                  properties:
                    PA:
                      type: integer
                      description: "타석 수"
                      example: 3
                    AB:
                      type: integer
                      description: "타수"
                      example: 3
                    H:
                      type: integer
                      description: "안타"
                      example: 1
                    runs:
                      type: integer
                      description: "득점"
                      example: 0
                    RBI:
                      type: integer
                      description: "타점"
                      example: 0
            pitcher:
              type: object
              properties:
                id:
                  type: integer
                  description: "PitcherGameParticipation ID"
                  example: 201
                name:
                  type: string
                  description: "선수 이름"
                  example: "박투수"
                position:
                  type: string
                  description: "포지션"
                  example: "P"
                ERA:
                  type: number
                  description: "평균자책점"
                  example: 2.50
                todayStats:
                  type: object
                  properties:
                    IP:
                      type: integer
                      description: "이닝 수"
                      example: 3
                    runs:
                      type: integer
                      description: "실점"
                      example: 0
                    earnedRuns:
                      type: integer
                      description: "자책점"
                      example: 0
                    H:
                      type: integer
                      description: "피안타"
                      example: 2
                    K:
                      type: integer
                      description: "삼진"
                      example: 3
                    BB:
                      type: integer
                      description: "볼넷"
                      example: 1
        outcount:
          type: integer
          description: "아웃 카운트"
          example: 0
        waitingBatters:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "BatterGameParticipation ID"
                example: 101
              name:
                type: string
                description: "선수 이름"
                example: "김타자"
              position:
                type: string
                description: "포지션"
                example: "LF"
              battingOrder:
                type: integer
                description: "타순"
                example: 2
      required:
        - playId
        - gameSummary
        - lineup
        - runnersOnBase
        - currentAtBat
        - outcount
        - waitingBatters

    PlayerListWithSubstitutionFlag:
      type: object
      properties:
        id:
          type: integer
          description: "팀-토너먼트 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "홈팀"
        players:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "playerTournamentId"
                example: 101
              name:
                type: string
                description: "선수 이름"
                example: "김선수"
              position:
                type: string
                description: "포지션"
                example: "LF"
              isSubstitutable:
                type: boolean
                description: "교체 가능 여부"
                example: true
      required:
        - id
        - name
        - players

    PlayerListWithSubstitutableResponse:
      type: object
      properties:
        id:
          type: integer
          description: "팀-토너먼트 ID"
          example: 1
        name:
          type: string
          description: "팀 이름"
          example: "홈팀"
        players:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "playerTournamentId"
                example: 101
              name:
                type: string
                description: "선수 이름"
                example: "김선수"
              position:
                type: string
                description: "포지션"
                example: "LF"
              isSubstitutable:
                type: boolean
                description: "교체 가능 여부"
                example: true
      required:
        - id
        - name
        - players

    LineupResponse:
      type: object
      properties:
        batters:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "playerTournamentId"
                example: 101
              name:
                type: string
                description: "선수 이름"
                example: "김타자"
              position:
                type: string
                description: "포지션"
                example: "LF"
              battingOrder:
                type: integer
                description: "타순"
                example: 1
        pitcher:
          type: object
          properties:
            id:
              type: integer
              description: "playerTournamentId"
              example: 201
            name:
              type: string
              description: "선수 이름"
              example: "박투수"
            position:
              type: string
              description: "포지션"
              example: "P"
      required:
        - batters
        - pitcher
